# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Page | Post

type PageBlocksHero {
  heading: String
  subheading: String
  description: String
  image: String
}

union PageBlocksFeaturesItemsArticle = Post

type PageBlocksFeaturesItems {
  article: PageBlocksFeaturesItemsArticle
}

type PageBlocksFeatures {
  items: [PageBlocksFeaturesItems]
}

type PageBlocksContentItems {
  image: String
  name: String
  description: String
  href: String
}

type PageBlocksContent {
  items: [PageBlocksContentItems]
}

type PageBlocksVideoItems {
  title: String
  description: String
  url: String
}

type PageBlocksVideo {
  items: [PageBlocksVideoItems]
}

union PageBlocks = PageBlocksHero | PageBlocksFeatures | PageBlocksContent | PageBlocksVideo

type Page implements Node & Document {
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Post implements Node & Document {
  title: String
  date: String
  image: String
  author: String
  authorTwitter: String
  category: [String]
  tags: [String]
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
}

input DocumentMutation {
  page: PageMutation
  post: PostMutation
}

input PageBlocksHeroMutation {
  heading: String
  subheading: String
  description: String
  image: String
}

input PageBlocksFeaturesItemsMutation {
  article: String
}

input PageBlocksFeaturesMutation {
  items: [PageBlocksFeaturesItemsMutation]
}

input PageBlocksContentItemsMutation {
  image: String
  name: String
  description: String
  href: String
}

input PageBlocksContentMutation {
  items: [PageBlocksContentItemsMutation]
}

input PageBlocksVideoItemsMutation {
  title: String
  description: String
  url: String
}

input PageBlocksVideoMutation {
  items: [PageBlocksVideoItemsMutation]
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  features: PageBlocksFeaturesMutation
  content: PageBlocksContentMutation
  video: PageBlocksVideoMutation
}

input PageMutation {
  blocks: [PageBlocksMutation]
}

input PostMutation {
  title: String
  date: String
  image: String
  author: String
  authorTwitter: String
  category: [String]
  tags: [String]
  description: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  